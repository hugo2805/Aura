# GitHub Actions workflow â€” package Aura with Squirrel and a custom WPFâ€¯installer
# TriggerÂ : lorsquâ€™une Release GitHub est *publiÃ©e* (tag vX.Y.Z)

name: Package & Release (Windows)

permissions:
  contents: write

on:
  release:
    types: [published]

# ---------------------------------------------------------------------------
# Secrets requis
#   BUILD_BASE_URL â€” URL racine oÃ¹ se trouvent les ZIP (exÂ : https://build.sealion.fr)
#   GITHUB_TOKEN   â€” fourni automatiquement par GitHub
# ---------------------------------------------------------------------------

env:
  ZIP_NAME_TEMPLATE: Aura.zip   # nom du build Unity compressÃ©

jobs:
  windows:
    runs-on: windows-latest

    steps:
      # 1Â â€“ Checkout du dÃ©pÃ´t
      - name: Checkout
        uses: actions/checkout@v4

      # 2Â â€“ RÃ©cupÃ¨re la version depuis le tag (v1.2.3 â†’ 1.2.3)
      - name: Parse version
        id: vars
        shell: bash
        run: |
          TAG="${GITHUB_REF_NAME}"
          VERSION=${TAG#v}
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"

      # 3Â â€“ TÃ©lÃ©charge le ZIP du player Unity
      - name: Download Unity build ZIP
        shell: pwsh
        run: |
          $base = "https://build.sealion.fr"
          $ver  = '${{ steps.vars.outputs.version }}'
          $zip  = '${{ env.ZIP_NAME_TEMPLATE }}'
          $url  = "$base/$ver/$zip"
          Write-Host "Downloading $url â€¦"
          Invoke-WebRequest -Uri $url -OutFile unity.zip -UseBasicParsing

      # 4Â â€“ DÃ©compresse le ZIP Unity
      - name: Extract Unity ZIP
        run: 7z x unity.zip -obuild/UnityPlayer

      # 5Â â€“ TÃ©lÃ©charge le ZIP prÃ©â€‘compilÃ© dâ€™AuraInstaller
      - name: Download AuraInstaller ZIP
        shell: pwsh
        run: |
          $base = "https://build.sealion.fr"
          $ver  = '${{ steps.vars.outputs.version }}'
          $url  = "$base/$ver/AuraInstaller.zip"
          Write-Host "Downloading $url â€¦"
          Invoke-WebRequest -Uri $url -OutFile installer.zip -UseBasicParsing

      # 6Â â€“ DÃ©compresse AuraInstaller
      - name: Extract AuraInstaller ZIP
        run: 7z x installer.zip -obuild/Installer

      # 7Â â€“ PrÃ©pare le contenu du package (.nupkg)
      - name: Prepare package content
        shell: pwsh
        run: |
          # -----------------------------------------------------------------
          # 1) Player Unity complet   â†’ package/UnityPlayer/â€¦
          # 2) AuraInstaller.exe (+ .pdb) â†’ package/
          # -----------------------------------------------------------------
          New-Item -ItemType Directory -Force -Path package | Out-Null

          Copy-Item -Recurse build/UnityPlayer/* package/ -Force

          $exe = Get-ChildItem build/Installer -Recurse -Filter AuraInstaller.exe | Select-Object -First 1
          if (-not $exe) { throw "AuraInstaller.exe introuvable dans le ZIP !" }

          Copy-Item $exe.FullName package/ -Force
          Copy-Item ($exe.FullName -replace '\.exe$','\.pdb') package/ -ErrorAction SilentlyContinue

      # 8Â â€“ GÃ©nÃ¨re Aura.nuspec Ã  la volÃ©e
      - name: Create Aura.nuspec
        shell: bash
        run: |
          VER="${{ steps.vars.outputs.version }}"
          {
            echo '<?xml version="1.0"?>'
            echo '<package>'
            echo '  <metadata>'
            echo '    <id>Aura</id>'
            echo "    <version>${VER}</version>"
            echo '    <authors>Sealion</authors>'
            echo '    <description>AURA Unity app (player + WPF installer) packagÃ©e par Squirrel.</description>'
            echo '  </metadata>'
            echo '  <files>'
            echo '    <file src="package/**" target="lib" />'
            echo '    <file src="README.md" target="" />'
            echo '  </files>'
            echo '</package>'
          } > Aura.nuspec

      # 8bÂ â€“ README minimal pour NuGet
      - name: Create README.md
        run: echo "AURA Unity app packaged with a custom WPF installer." > README.md

      # 9Â â€“ CrÃ©e le .nupkg (Unity inclus)
      - name: NuGet pack
        run: nuget pack Aura.nuspec -Version ${{ steps.vars.outputs.version }} -OutputDirectory . -NoDefaultExcludes

      # 10Â â€“ Installe lâ€™outil CLI Squirrel
      - name: Install Squirrel CLI
        run: nuget install squirrel.windows -OutputDirectory tools -Verbosity quiet

      # 11Â â€“ ReleasifyÂ : gÃ©nÃ¨re AuraSetup.exe + RELEASES + delta patches
      - name: Squirrel releasify (Unity included)
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          $ver = '${{ steps.vars.outputs.version }}'
          $squirrel = Get-ChildItem tools -Recurse -Filter Squirrel.exe | Select-Object -First 1

          Remove-Item -Recurse -Force Releases -ErrorAction Ignore
          New-Item -ItemType Directory -Path Releases | Out-Null

          $args = @(
            "--releasify", "Aura.$ver.nupkg",
            "--releaseDir", "Releases",
            "--no-msi",
            "--bootstrapperExe", "AuraSetup.exe",
            "--exe", "AuraInstaller.exe",
            "--verbose"
          )

          Write-Host ">> Running: $($squirrel.FullName) $($args -join ' ')"
          & $squirrel.FullName @args
          if ($LASTEXITCODE -ne 0) { throw "Squirrel releasify failed ($LASTEXITCODE)" }

      # 12Â â€“ VÃ©rification rapide des artefacts
      - name: VÃ©rification des fichiers Squirrel
        shell: pwsh
        run: |
          if (-not (Test-Path "Releases/RELEASES")) { throw "RELEASES manquant" }
          if (-not (Test-Path "Releases/AuraSetup.exe")) { throw "AuraSetup.exe manquant" }
          Write-Host "âœ… ArtÃ©facts Squirrel OK"

      # 13Â â€“ DebugÂ : liste les EXE/NUPKG gÃ©nÃ©rÃ©s
      - name: ðŸ”Ž Debug build outputs
        shell: pwsh
        run: Get-ChildItem -Recurse | Where-Object { $_.Name -like '*.exe' -or $_.Name -like '*.nupkg' }

      # 14Â â€“ Attache les artefacts Ã  la Release GitHub
      - name: Attach artefacts to GitHub Release
        if: github.event_name == 'release' && github.event.action == 'published'
        uses: softprops/action-gh-release@v2
        with:
          fail_on_unmatched_files: false
          files: Releases/**
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
