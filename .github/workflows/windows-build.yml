# GitHub Actions workflow ‚Äî package Aura with Squirrel and a custom WPF installer
# Trigger: runs whenever a GitHub‚ÄØRelease is *published* (tag vX.Y.Z)

name: Package & Release (Windows)

permissions:
  contents: write

on:
  release:
    types: [published]

# ---------------------------------------------------------------------------
# Required secrets
#   BUILD_BASE_URL ‚Äî root URL of your zipped Unity builds (e.g. https://build.sealion.fr)
#   GITHUB_TOKEN   ‚Äî provided automatically by GitHub
# ---------------------------------------------------------------------------

env:
  ZIP_NAME_TEMPLATE: Aura.zip   # name of your Unity build archive

jobs:
  windows:
    runs-on: windows-latest

    steps:
      # 1 ‚Äì Checkout repository
      - name: Checkout
        uses: actions/checkout@v4

      # 2 ‚Äì Extract version from tag (v1.2.3 ‚Üí 1.2.3)
      - name: Parse version
        id: vars
        shell: bash
        run: |
          TAG="${GITHUB_REF_NAME}"
          VERSION=${TAG#v}
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"

      # 3 ‚Äì Download Unity build ZIP
      - name: Download Unity build ZIP
        shell: pwsh
        run: |
          $base = "https://build.sealion.fr"
          $ver  = '${{ steps.vars.outputs.version }}'
          $zip  = '${{ env.ZIP_NAME_TEMPLATE }}'
          $url  = "$base/$ver/$zip"
          Write-Host "Downloading $url ‚Ä¶"
          Invoke-WebRequest -Uri $url -OutFile unity.zip -UseBasicParsing

      # 4 ‚Äì Extract Unity ZIP
      - name: Extract Unity ZIP
        run: 7z x unity.zip -obuild/UnityPlayer

      # 5 ‚Äì Download prebuilt AuraInstaller ZIP
      - name: Download AuraInstaller ZIP
        shell: pwsh
        run: |
          $base = "https://build.sealion.fr"
          $ver  = '${{ steps.vars.outputs.version }}'
          $url  = "$base/$ver/AuraInstaller.zip"
          Write-Host "Downloading $url ‚Ä¶"
          Invoke-WebRequest -Uri $url -OutFile installer.zip -UseBasicParsing

      # 6 ‚Äì Extract AuraInstaller ZIP
      - name: Extract AuraInstaller ZIP
        run: 7z x installer.zip -obuild/Installer

      # 7 ‚Äì Gather all files to be packaged
      - name: Prepare package content
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path package
          # Copy Unity build output (flat)
          Copy-Item -Recurse build/UnityPlayer/* package/
          # Copy *everything* from AuraInstaller ZIP (the .exe is now at the root)
          Copy-Item -Recurse build/Installer/* package/

          # ‚ûú Locate AuraInstaller.exe (root of the zip or any sub‚Äëfolder)
          $exe = Get-ChildItem build/Installer -Recurse -Filter AuraInstaller.exe | Select-Object -First 1
          if (-not $exe) { throw "AuraInstaller.exe introuvable dans le ZIP !" }
          # Ensure the executable is present at the package root
          Copy-Item $exe.FullName package/ -Force

      # 8 ‚Äì Create Aura.nuspec on the fly (no heredoc, avoids YAML issues)
      - name: Create Aura.nuspec
        shell: bash
        run: |
          VER="${{ steps.vars.outputs.version }}"
          {
            echo '<?xml version="1.0"?>'
            echo '<package>'
            echo '  <metadata>'
            echo '    <id>Aura</id>'
            echo "    <version>${VER}</version>"
            echo '    <authors>Sealion</authors>'
            echo '    <description>AURA Unity app with custom WPF installer</description>'
            echo '  </metadata>'
            echo '  <files>'
            echo '    <file src="package/**" target="lib" />'
            echo '    <file src="README.md" target="" />'
            echo '  </files>'
            echo '</package>'
          } > Aura.nuspec

      # 8b ‚Äì Ajout d'un README temporaire pour NuGet
      - name: Create README.md
        run: echo "AURA Unity app packaged with a custom WPF installer." > README.md

      # 9 ‚Äì Create the .nupkg
      - name: NuGet pack
        run: nuget pack Aura.nuspec -Version ${{ steps.vars.outputs.version }} -OutputDirectory . -NoDefaultExcludes

      # 10 ‚Äì Install Squirrel CLI
      - name: Install Squirrel CLI
        run: nuget install squirrel.windows -OutputDirectory tools -Verbosity quiet

      # 11 ‚Äì Releasify: generate setup + RELEASES + delta patches
      - name: Squirrel releasify with custom installer
        shell: pwsh
        run: |
          $ver = '${{ steps.vars.outputs.version }}'
          $squirrel = Get-ChildItem tools -Recurse -Filter Squirrel.exe | Select-Object -First 1

          # Nettoyage du dossier Releases
          Remove-Item -Recurse -Force Releases -ErrorAction Ignore
          New-Item -ItemType Directory -Path Releases

          # Copie Setup.exe pour que Squirrel puisse le renommer en AuraSetup.exe
          $setupPath = "$($squirrel.DirectoryName)\Setup.exe"
          Write-Host "Chemin de Setup.exe: $setupPath"
          Copy-Item $setupPath .\AuraSetup.exe -Force

          & $squirrel.FullName `
            --releasify Aura.$ver.nupkg `
            --releaseDir Releases `
            --no-msi `
            --bootstrapperExe AuraSetup.exe `
            --exe AuraInstaller.exe `
            --verbose 2>&1

          Write-Host "Squirrel exit code: $LASTEXITCODE"

      # 11a ‚Äì Lister les fichiers dans Releases pour d√©boguer
      - name: üîç Lister les fichiers dans Releases
        run: ls -R Releases

      # 11b ‚Äì V√©rification des fichiers Squirrel g√©n√©r√©s
      - name: V√©rification des fichiers Squirrel
        shell: pwsh
        run: |
          if (-not (Test-Path "Releases/RELEASES")) {
            Write-Host "‚ö†Ô∏è Fichier RELEASES manquant"
          } else {
            Write-Host "‚úÖ Fichier RELEASES trouv√©"
          }
          if (-not (Test-Path "Releases/AuraSetup.exe")) {
            Write-Host "‚ö†Ô∏è AuraSetup.exe manquant"
          } else {
            Write-Host "‚úÖ AuraSetup.exe trouv√©"
          }
          Get-ChildItem -Recurse Releases | Format-List

      - name: üîé Debug all build outputs
        shell: pwsh
        run: |
          Get-ChildItem -Recurse | Where-Object { $_.Name -like '*.exe' -or $_.Name -like '*.nupkg' }

      # 12 ‚Äì Debug Upload - Show release files
      - name: Debug Upload - Print files
        run: ls -R Releases

      # 13 ‚Äì Attach artefacts to the GitHub Release
      - name: Attach artefacts to GitHub Release
        if: github.event_name == 'release' && github.event.action == 'published'
        uses: softprops/action-gh-release@v2
        with:
          fail_on_unmatched_files: false
          files: |
            Releases/**/*.nupkg
            Releases/**/RELEASES*
            Releases/**/AuraSetup.exe
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
