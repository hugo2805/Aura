# GitHub Actions workflow ‚Äî package Aura with Squirrel and a custom WPF‚ÄØinstaller
# Trigger¬†: lorsqu‚Äôune Release GitHub est *publi√©e* (tag vX.Y.Z)

name: Package & Release (Windows)

permissions:
  contents: write

on:
  release:
    types: [published]

# ---------------------------------------------------------------------------
# Secrets requis
#   BUILD_BASE_URL ‚Äî URL racine o√π se trouvent les ZIP (ex¬†: https://build.sealion.fr)
#   GITHUB_TOKEN   ‚Äî fourni automatiquement par GitHub
# ---------------------------------------------------------------------------

env:
  ZIP_NAME_TEMPLATE: Aura.zip        # nom du build Unity compress√©

jobs:
  windows:
    runs-on: windows-latest

    steps:
      # 1¬†‚Äì Checkout du d√©p√¥t
      - name: Checkout
        uses: actions/checkout@v4

      # 2¬†‚Äì R√©cup√®re la version depuis le tag (v1.2.3 ‚Üí 1.2.3)
      - name: Parse version
        id: vars
        shell: bash
        run: |
          TAG="${GITHUB_REF_NAME}"
          VERSION=${TAG#v}
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"

      # 3¬†‚Äì T√©l√©charge le ZIP du player Unity
      - name: Download Unity build ZIP
        shell: pwsh
        run: |
          $base = "https://build.sealion.fr"
          $ver  = '${{ steps.vars.outputs.version }}'
          $zip  = '${{ env.ZIP_NAME_TEMPLATE }}'
          $url  = "$base/$ver/$zip"
          Write-Host "Downloading $url ‚Ä¶"
          Invoke-WebRequest -Uri $url -OutFile unity.zip -UseBasicParsing

      # 4¬†‚Äì D√©compresse le ZIP Unity
      - name: Extract Unity ZIP
        run: 7z x unity.zip -obuild/UnityPlayer

      # 5¬†‚Äì T√©l√©charge le ZIP pr√©‚Äëcompil√© d‚ÄôAuraInstaller (WPF)¬†‚Äì *n‚Äôest PAS packag√© dans le .nupkg*
      - name: Download AuraInstaller ZIP
        shell: pwsh
        run: |
          $base = "https://build.sealion.fr"
          $ver  = '${{ steps.vars.outputs.version }}'
          $url  = "$base/$ver/AuraInstaller.zip"
          Write-Host "Downloading $url ‚Ä¶"
          Invoke-WebRequest -Uri $url -OutFile installer.zip -UseBasicParsing

      # 6¬†‚Äì D√©compresse AuraInstaller (on garde le binaire pour plus tard)
      - name: Extract AuraInstaller ZIP
        run: 7z x installer.zip -obuild/Installer

      # 7¬†‚Äì Pr√©pare le contenu du package (.nupkg)
      - name: Prepare package content
        shell: pwsh
        run: |
          # -----------------------------------------------------------------
          # 1) Player Unity complet   ‚Üí package/‚Ä¶
          # -----------------------------------------------------------------
          New-Item -ItemType Directory -Force -Path package | Out-Null

          # Assure que Protec.exe est bien √† la racine du package
          $protecexe = Get-ChildItem build/UnityPlayer -Recurse -Filter Protec.exe | Select-Object -First 1
          if (-not $protecexe) { throw "‚ùå Protec.exe introuvable dans le build Unity" }
          Copy-Item -Path $protecexe.FullName -Destination package/ -Force

          # Copie le reste du contenu
          Copy-Item -Recurse build/UnityPlayer/* package/ -Force

          # Supprime les √©ventuels doublons de Protec.exe dans les sous-dossiers (Squirrel √©choue si plusieurs exe identiques)
          Get-ChildItem package -Recurse -Filter Protec.exe |
            Where-Object { $_.DirectoryName -ne (Resolve-Path package).Path } |
            Remove-Item -Force

      # 8¬†‚Äì G√©n√®re Aura.nuspec ligne par ligne (echo) ‚Äì √©vite les soucis YAML
      - name: Create Aura.nuspec
        shell: bash
        run: |
          VER="${{ steps.vars.outputs.version }}"
          echo '<?xml version="1.0"?>'                         >  Aura.nuspec
          echo '<package>'                                      >> Aura.nuspec
          echo '  <metadata>'                                   >> Aura.nuspec
          echo '    <id>Aura</id>'                              >> Aura.nuspec
          echo "    <version>${VER}</version>"                >> Aura.nuspec
          echo '    <authors>Sealion</authors>'                 >> Aura.nuspec
          echo '    <description>AURA Unity app (player only) packag√©e par Squirrel.</description>' >> Aura.nuspec
          echo '  </metadata>'                                  >> Aura.nuspec
          echo '  <files>'                                      >> Aura.nuspec
          echo '    <file src="package/**" target="lib/net45" />' >> Aura.nuspec
          echo '    <file src="README.md" target="" />'      >> Aura.nuspec
          echo '  </files>'                                     >> Aura.nuspec
          echo '</package>'                                     >> Aura.nuspec

      # 8b¬†‚Äì README minimal pour NuGet
      - name: Create README.md
        run: echo "AURA Unity app packaged (player only)." > README.md

      # 9¬†‚Äì Cr√©e le .nupkg (Unity inclus)
      - name: NuGet pack
        run: nuget pack Aura.nuspec -Version ${{ steps.vars.outputs.version }} -OutputDirectory . -NoDefaultExcludes

      # 10¬†‚Äì Installe la derni√®re version disponible du CLI Squirrel
      - name: Install Squirrel CLI (latest)
        run: nuget install squirrel.windows -OutputDirectory tools -Verbosity quiet

      # 11¬†‚Äì Releasify¬†: g√©n√®re update.exe (= bootstrapper Squirrel)
      - name: Squirrel releasify (Unity only)
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          $ver      = '${{ steps.vars.outputs.version }}'
          $squirrel = Get-ChildItem tools -Recurse -Filter Squirrel.exe | Select-Object -First 1

          # Dossier de sortie et d'entr√©e sp√©cifiques pour √©viter les nupkg parasites
          $pkgDir = "Packages"
          $relDir = "Releases"

          Remove-Item -Recurse -Force $pkgDir,$relDir -ErrorAction Ignore
          New-Item -ItemType Directory -Path $pkgDir,$relDir | Out-Null

          # Copie uniquement *notre* package dans $pkgDir
          Move-Item -Force "Aura.$ver.nupkg" $pkgDir/ | Out-Null

          $mainExe = 'Protec.exe'

          Write-Host 'üìÇ Listing working dir before releasify:'
          Get-ChildItem -Recurse -File | ForEach-Object { Write-Host $_.FullName }

          $args = @(
            '--releasify', "$pkgDir/Aura.$ver.nupkg",
            '--packagesDir', $pkgDir,
            '--releaseDir',  $relDir,
            '--no-msi',
            '--exe', $mainExe,
            '--verbose'
          )

          Write-Host "‚ñ∂Ô∏è  Launching Squirrel.exe‚Ä¶ ($($squirrel.FullName))"
          $proc = Start-Process -FilePath $squirrel.FullName -ArgumentList $args -PassThru -Wait -NoNewWindow

          if ($proc.ExitCode -ne 0) {
            throw "‚ùå Squirrel releasify failed (exit code $($proc.ExitCode))"
          }

          Write-Host '‚úÖ Squirrel releasify completed'

          #¬†On ajoute ensuite l'installateur WPF pr√©‚Äëcompil√© au dossier Releases
          Copy-Item build/Installer/AuraInstaller.exe $relDir/ -Force

      # 12¬†‚Äì V√©rification rapide des art√©facts
      - name: V√©rification des fichiers Squirrel
        shell: pwsh
        run: |
          if (-not (Test-Path 'Releases/RELEASES'))          { throw 'RELEASES manquant' }
          if (-not (Test-Path 'Releases/update.exe'))        { throw 'update.exe manquant' }
          if (-not (Test-Path 'Releases/AuraInstaller.exe')) { throw 'AuraInstaller.exe manquant' }
          Write-Host '‚úÖ Art√©facts Squirrel OK'

      # 13¬†‚Äì Debug¬†: liste les EXE/NUPKG g√©n√©r√©s
      - name: üîé Debug build outputs
        shell: pwsh
        run: Get-ChildItem -Recurse | Where-Object { $_.Name -match '\\.(exe|nupkg)$' }

      # 14¬†‚Äì Attache les art√©facts √† la Release GitHub
      - name: Attach artefacts to GitHub Release
        if: github.event_name == 'release' && github.event.action == 'published'
        uses: softprops/action-gh-release@v2
        with:
          fail_on_unmatched_files: false
          files: Releases/**
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
