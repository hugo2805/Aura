# GitHub Actions workflow — package a manually built Unity player hosted off‑site, then create an installer with Squirrel
# Trigger: when you publish a GitHub Release (type = published)

name: Package & Release (Windows)

on:
  release:
    types: [published]

# ---------------------------------------------------------------------------
# Required secrets:
#   BUILD_BASE_URL   – Base URL where your zipped Unity builds live, e.g.
#                      https://cdn.example.com/builds  (no trailing slash)
#   GITHUB_TOKEN     – Provided automatically by GitHub (don’t touch)
# Optional secrets if your storage needs auth (e.g. AWS):
#   STORAGE_ACCESS_KEY / STORAGE_SECRET_KEY … then adapt the download step
# ---------------------------------------------------------------------------

env:
  ZIP_NAME_TEMPLATE: Aura.zip   # If you use a pattern like MyGame-{version}.zip, change here

jobs:
  windows:
    runs-on: windows-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Parse version
        id: vars
        shell: bash
        run: |
          TAG="${GITHUB_REF_NAME}"
          VERSION=${TAG#v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Download Unity build ZIP
        shell: pwsh
        run: |
          $base = "https://build.sealion.fr"
          $ver  = '${{ steps.vars.outputs.version }}'
          $zip  = '${{ env.ZIP_NAME_TEMPLATE }}'
          $url  = "$base/$ver/$zip"
          Write-Host "Downloading $url…"
          Invoke-WebRequest -Uri $url -OutFile unity.zip -UseBasicParsing

      - name: Extract Unity ZIP
        run: |
          7z x unity.zip -obuild/UnityPlayer

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Publish installer UI (WPF)
        run: dotnet publish AuraInstaller/AuraInstaller.csproj -c Release -r win-x64 --self-contained false /p:PublishSingleFile=true -o build/Installer

      - name: Prepare package content
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path package
          Copy-Item -Recurse build/Installer/*     package/
          Copy-Item -Recurse build/UnityPlayer/*   package/

      - name: NuGet pack
        run: nuget pack MyUnityApp.nuspec -Version ${{ steps.vars.outputs.version }} -OutputDirectory .

      - name: Install Squirrel CLI
        run: nuget install squirrel.windows -OutputDirectory tools -Verbosity quiet

      - name: Squirrel releasify with custom installer
        shell: pwsh
        run: |
          $squirrel = Get-ChildItem tools -Recurse -Filter Squirrel.exe | Select-Object -First 1
          & $squirrel.FullName --releasify MyUnityApp.${{ steps.vars.outputs.version }}.nupkg \
            --releaseDir Releases \
            --setupExe AuraInstaller.exe \
            --no-msi

      - name: Attach to GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            Releases/AuraInstaller.exe
            Releases/RELEASES
            Releases/*.nupkg
          overwrite: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
