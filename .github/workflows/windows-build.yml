# GitHub Actions workflow — package Aura with Squirrel and a custom WPF installer
# Trigger : runs whenever a GitHub **Release** is *published* (tag vX.Y.Z)

name: Package & Release (Windows)

permissions:
  contents: write

on:
  release:
    types: [published]

# ---------------------------------------------------------------------------
# Required secrets
#   BUILD_BASE_URL — root URL of your zipped Unity builds (e.g. https://build.sealion.fr)
#   GITHUB_TOKEN   — provided automatically by GitHub
# ---------------------------------------------------------------------------

env:
  ZIP_NAME_TEMPLATE: Aura.zip   # name of the Unity build archive

jobs:
  windows:
    runs-on: windows-latest

    steps:
      # 1 – Checkout repository ------------------------------------------------
      - name: Checkout
        uses: actions/checkout@v4

      # 2 – Extract version from tag (v1.2.3 → 1.2.3) ------------------------
      - name: Parse version
        id: vars
        shell: bash
        run: |
          TAG="${GITHUB_REF_NAME}"
          VERSION=${TAG#v}
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"

      # 3 – Download Unity build ZIP -----------------------------------------
      - name: Download Unity build ZIP
        shell: pwsh
        run: |
          $base = "https://build.sealion.fr"
          $ver  = '${{ steps.vars.outputs.version }}'
          $zip  = '${{ env.ZIP_NAME_TEMPLATE }}'
          Invoke-WebRequest -Uri "$base/$ver/$zip" -OutFile unity.zip -UseBasicParsing

      # 4 – Extract Unity ZIP --------------------------------------------------
      - name: Extract Unity ZIP
        run: 7z x unity.zip -obuild/UnityPlayer

      # 5 – Download pre‑built AuraInstaller ZIP ------------------------------
      - name: Download AuraInstaller ZIP
        shell: pwsh
        run: |
          $base = "https://build.sealion.fr"
          $ver  = '${{ steps.vars.outputs.version }}'
          Invoke-WebRequest -Uri "$base/$ver/AuraInstaller.zip" -OutFile installer.zip -UseBasicParsing

      # 6 – Extract AuraInstaller ZIP -----------------------------------------
      - name: Extract AuraInstaller ZIP
        run: 7z x installer.zip -obuild/Installer

      # 7 – Gather all files to be packaged -----------------------------------
      - name: Prepare package content
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path package | Out-Null
          Copy-Item -Recurse build/UnityPlayer/* package/
          Copy-Item -Recurse build/Installer/*   package/

          # ➜ Locate AuraInstaller.exe (wherever it is in the ZIP)
          $exe = Get-ChildItem build/Installer -Recurse -Filter AuraInstaller.exe | Select-Object -First 1
          if (-not $exe) { throw "AuraInstaller.exe introuvable dans le ZIP !" }
          Copy-Item $exe.FullName package/ -Force

      # 8 – Create Aura.nuspec on‑the‑fly -------------------------------------
      - name: Create Aura.nuspec
        shell: bash
        run: |
          VER="${{ steps.vars.outputs.version }}"
          {
            echo '<?xml version="1.0"?>'
            echo '<package>'
            echo '  <metadata>'
            echo '    <id>Aura</id>'
            echo "    <version>${VER}</version>"
            echo '    <authors>Sealion</authors>'
            echo '    <description>AURA Unity app with custom WPF installer</description>'
            echo '  </metadata>'
            echo '  <files>'
            # Put everything under lib/net45 so both NuGet *and* Squirrel are happy
            echo '    <file src="package/**" target="lib/net45" />'
            echo '    <file src="README.md" target="" />'
            echo '  </files>'
            echo '</package>'
          } > Aura.nuspec

      # 8b – Minimal README so NuGet stops warning ----------------------------
      - name: Create README.md
        run: echo "AURA Unity app packaged with a custom WPF installer." > README.md

      # 9 – Build the .nupkg ---------------------------------------------------
      - name: NuGet pack
        run: nuget pack Aura.nuspec -Version ${{ steps.vars.outputs.version }} -OutputDirectory . -NoDefaultExcludes

      # 10 – Install Squirrel CLI ---------------------------------------------
      - name: Install Squirrel CLI
        run: nuget install squirrel.windows -OutputDirectory tools -Verbosity quiet

      # 11 – Releasify: create Setup.exe, RELEASES, delta patches -------------
      - name: Squirrel releasify (custom installer)
        shell: pwsh
        run: |
          $ver      = '${{ steps.vars.outputs.version }}'
          $squirrel = Get-ChildItem tools -Recurse -Filter Squirrel.exe | Select-Object -First 1

          # Clean output folder
          Remove-Item -Recurse -Force Releases -ErrorAction Ignore
          New-Item -ItemType Directory -Path Releases | Out-Null

          # Provide bootstrapper exe so we keep the name AuraSetup.exe
          Copy-Item (Join-Path $squirrel.DirectoryName 'Setup.exe') AuraSetup.exe -Force

          # Main executable path *inside* the .nupkg (because everything sits under lib/net45)
          $exeInPkg = 'lib\net45\AuraInstaller.exe'

          & $squirrel.FullName `
            --releasify Aura.$ver.nupkg `
            --releaseDir Releases `
            --no-msi `
            --bootstrapperExe AuraSetup.exe `
            --exe $exeInPkg `
            --verbose

          if ($LASTEXITCODE -ne 0) {
            throw "Squirrel releasify failed with exit code $LASTEXITCODE"
          }

      # 12 – Guarantee AuraSetup.exe is at the root of Releases ---------------
      - name: Ensure AuraSetup.exe at root
        shell: pwsh
        run: |
          $exe = Get-ChildItem -Recurse Releases -Filter AuraSetup.exe | Select-Object -First 1
          if ($exe) {
            Copy-Item $exe.FullName Releases/AuraSetup.exe -Force
            Write-Host "✅ AuraSetup.exe copié à la racine de Releases/"
          } else {
            throw "AuraSetup.exe introuvable après releasify !"
          }

      # 13 – Quick sanity check ------------------------------------------------
      - name: Verify Squirrel outputs
        shell: pwsh
        run: |
          if (-not (Test-Path 'Releases/RELEASES')) { throw 'Fichier RELEASES manquant' }
          if (-not (Test-Path 'Releases/AuraSetup.exe')) { throw 'AuraSetup.exe manquant' }
          Write-Host '✅ Tous les fichiers Squirrel sont présents'

      - name: List Releases folder (debug)
        run: ls -R Releases

      # 14 – Attach artefacts to the GitHub Release ---------------------------
      - name: Attach artefacts to GitHub Release
        if: github.event_name == 'release' && github.event.action == 'published'
        uses: softprops/action-gh-release@v2
        with:
          fail_on_unmatched_files: false
          files: Releases/**
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
