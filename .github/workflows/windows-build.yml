# .github/workflows/build.yml
# ------------------------------------------------------------
# G√©n√®re l'installeur Windows √† chaque TAG push√©.
# 1. Compile l'Updater WPF (.NET 8)
# 2. T√©l√©charge le build Unity zipp√© depuis ton serveur
# 3. Fusionne Updater + jeu dans BuildReady/
# 4. Lance Inno¬†Setup (ISS) pour cr√©er l'ex√©cutable d'installation
# 5. Publie l'installeur en tant qu'artefact de workflow
# ------------------------------------------------------------

name: Build Windows Installer

on:
  push:
    tags:
      - '*'

jobs:
  build:
    runs-on: windows-latest

    env:
      UNITY_ZIP_URL: "https://build.sealion.fr/updates/Aura.zip"  # ‚Üê adapte si n√©cessaire
      BUILD_DIR: BuildReady                                       # dossier temporaire

    steps:
      - name: ‚¨áÔ∏è Checkout repository
        uses: actions/checkout@v3

      - name: ‚öôÔ∏è Setup .NET 8
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      # --------------------------------------------------
      # 1) Compile l'Updater
      # --------------------------------------------------
      - name: üß± Restore & Build Updater
        run: |
          dotnet restore Updater/AuraInstaller.sln
          dotnet publish Updater/AuraInstaller.csproj -c Release -o ${{ env.BUILD_DIR }}\Updater

      # --------------------------------------------------
      # 2) T√©l√©charge le build Unity (Protec.exe etc.)
      # --------------------------------------------------
      - name: üì• Download Unity build zip
        shell: pwsh
        run: |
          Invoke-WebRequest -Uri ${{ env.UNITY_ZIP_URL }} -OutFile unity.zip
          Expand-Archive -Path unity.zip -DestinationPath ${{ env.BUILD_DIR }}\Game -Force

      # --------------------------------------------------
      # 3) G√©n√®re version.txt (tag courant) dans BuildReady
      # --------------------------------------------------
      - name: üè∑Ô∏è Generate version.txt
        shell: pwsh
        run: |
          $version = "${{ github.ref_name }}" -replace "^refs/tags/", "" -replace "^v", ""
          Set-Content -Path "${{ env.BUILD_DIR }}\version.txt" -Value $version
          echo "AppVersion=$version" | Out-File -FilePath $Env:GITHUB_ENV -Append

      # --------------------------------------------------
      # 4) Installe Inno¬†Setup et g√©n√®re l'installeur
      # --------------------------------------------------
      - name: üß∞ Install Inno Setup 6
        run: choco install innosetup --no-progress

      - name: üì¶ Run ISCC
        shell: pwsh
        run: |
          & "C:\Program Files (x86)\Inno Setup 6\ISCC.exe" `
            /DMyBuildDir="${{ github.workspace }}\${{ env.BUILD_DIR }}" `
            /DAppVersion=${{ env.AppVersion }} `
            Installer\setup.iss

      # --------------------------------------------------
      # 5) Publie l'installeur en artefact
      # --------------------------------------------------
      - name: ‚¨ÜÔ∏è Upload installer artifact
        uses: actions/upload-artifact@v4
        with:
          name: AuraInstaller
          path: Installer\Output\*.exe
