# GitHub Actions workflow — package Aura with Squirrel and a custom WPF installer
# Trigger: runs whenever a GitHub Release is *published* (tag vX.Y.Z)

name: Package & Release (Windows)

on:
  release:
    types: [published]

# ---------------------------------------------------------------------------
# Required secrets
#   BUILD_BASE_URL — root URL of your zipped Unity builds (e.g. https://build.sealion.fr)
#   GITHUB_TOKEN   — provided automatically by GitHub
# ---------------------------------------------------------------------------

env:
  ZIP_NAME_TEMPLATE: Aura.zip   # name of your Unity build archive

jobs:
  windows:
    runs-on: windows-latest

    steps:
      # 1 – Checkout repository
      - name: Checkout
        uses: actions/checkout@v4

      # 2 – Extract version from tag (v1.2.3 → 1.2.3)
      - name: Parse version
        id: vars
        shell: bash
        run: |
          TAG="${GITHUB_REF_NAME}"
          VERSION=${TAG#v}
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"

      # 3 – Download the Unity build ZIP
      - name: Download Unity build ZIP
        shell: pwsh
        run: |
          $base = '${{ secrets.BUILD_BASE_URL }}'
          $ver  = '${{ steps.vars.outputs.version }}'
          $zip  = '${{ env.ZIP_NAME_TEMPLATE }}'
          $url  = "$base/$ver/$zip"
          Write-Host "Downloading $url …"
          Invoke-WebRequest -Uri $url -OutFile unity.zip -UseBasicParsing

      # 4 – Extract the ZIP
      - name: Extract Unity ZIP
        run: 7z x unity.zip -obuild/UnityPlayer

      # 5 – Install .NET SDK (for WPF build)
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      # 6 – Publish the custom WPF installer
      - name: Publish AuraInstaller (WPF)
        run: dotnet publish AuraInstaller/AuraInstaller.csproj -c Release -r win-x64 --self-contained false /p:PublishSingleFile=true -o build/Installer

      # 7 – Gather all files to be packaged
      - name: Prepare package content
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path package
          Copy-Item -Recurse build/Installer/*   package/
          Copy-Item -Recurse build/UnityPlayer/* package/

      # 8 – Create Aura.nuspec on the fly (no heredoc, avoids YAML issues)
      - name: Create Aura.nuspec
        shell: bash
        run: |
          VER="${{ steps.vars.outputs.version }}"
          printf '%s
' "<?xml version=\"1.0\"?>" > Aura.nuspec
          printf '%s
' "<package>" >> Aura.nuspec
          printf '%s
' "  <metadata>" >> Aura.nuspec
          printf '%s
' "    <id>Aura</id>" >> Aura.nuspec
          printf '%s
' "    <version>${VER}</version>" >> Aura.nuspec
          printf '%s
' "    <authors>Sealion</authors>" >> Aura.nuspec
          printf '%s
' "    <description>AURA Unity app with custom WPF installer</description>" >> Aura.nuspec
          printf '%s
' "  </metadata>" >> Aura.nuspec
          printf '%s
' "  <files>" >> Aura.nuspec
          printf '%s
' "    <file src=\"package\**\*.*\" target=\"lib\net6.0-windows\" />" >> Aura.nuspec
          printf '%s
' "  </files>" >> Aura.nuspec
          printf '%s
' "</package>" >> Aura.nuspec

      # 9 – Create the .nupkg
      - name: NuGet pack
        run: nuget pack Aura.nuspec -Version ${{ steps.vars.outputs.version }} -OutputDirectory .

      # 10 – Install Squirrel CLI
      - name: Install Squirrel CLI
        run: nuget install squirrel.windows -OutputDirectory tools -Verbosity quiet

      # 11 – Releasify: generate AuraInstaller.exe + RELEASES + delta patches
      - name: Squirrel releasify with custom installer
        shell: pwsh
        run: |
          $ver = '${{ steps.vars.outputs.version }}'
          $squirrel = Get-ChildItem tools -Recurse -Filter Squirrel.exe | Select-Object -First 1
          & $squirrel.FullName --releasify Aura.$ver.nupkg --releaseDir Releases --setupExe AuraInstaller.exe --no-msi

      # 12 – Attach artefacts to the GitHub Release
      - name: Attach artefacts to GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            Releases/AuraInstaller.exe
            Releases/RELEASES
            Releases/*.nupkg
          overwrite: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
