# .github/workflows/build.yml
# ------------------------------------------------------------
# G√©n√®re l'installeur Windows pour **chaque tag** (push de vX.Y.Z).
# 1. Compile l'Updater WPF (.NET¬†8)
# 2. T√©l√©charge le build Unity zipp√© depuis le serveur perso
# 3. Fusionne Updater + jeu + version.txt dans BuildReady/
# 4. Ex√©cute Inno¬†Setup pour cr√©er `Aura_Setup.exe`
# 5. Publie l'ex√©cutable **√† la fois**¬†:
#    ‚Ä¢ comme artefact du workflow (pratique pour debug)
#    ‚Ä¢ comme asset de la Release GitHub correspondante (visible par les utilisateurs)
# ------------------------------------------------------------

name: Build Windows Installer

on:
  push:
    tags:
      - "*"   # tout tag d√©clenche le build

jobs:
  build:
    runs-on: windows-latest

    # Variables d'environnement communes au job
    env:
      UNITY_ZIP_URL: "https://build.sealion.fr/updates/Aura.zip"  # URL du zip Unity
      BUILD_DIR: BuildReady                                       # dossier temporaire local

    steps:
      # --------------------------------------------------
      # 0) Checkout
      # --------------------------------------------------
      - name: ‚¨áÔ∏è Checkout repository
        uses: actions/checkout@v3

      # --------------------------------------------------
      # 1) .NET¬†SDK
      # --------------------------------------------------
      - name: ‚öôÔ∏è Setup .NET¬†8
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: "8.0.x"

      # --------------------------------------------------
      # 2) Build Updater WPF
      # --------------------------------------------------
      - name: üß± Restore & publish Updater
        run: |
          dotnet restore Updater/AuraInstaller.sln
          dotnet publish Updater/AuraInstaller.csproj -c Release -o "${{ env.BUILD_DIR }}\\Updater"

      # --------------------------------------------------
      # 3) T√©l√©charge le jeu Unity (zip)
      # --------------------------------------------------
      - name: üì• Download Unity build
        shell: pwsh
        run: |
          Invoke-WebRequest -Uri "${{ env.UNITY_ZIP_URL }}" -OutFile unity.zip
          Expand-Archive -Path unity.zip -DestinationPath "${{ env.BUILD_DIR }}\\Game" -Force

      # --------------------------------------------------
      # 4) G√©n√®re version.txt √† partir du tag
      # --------------------------------------------------
      - name: üè∑Ô∏è Generate version.txt
        shell: pwsh
        run: |
          $version = "${{ github.ref_name }}" -replace "^refs/tags/", "" -replace "^v", ""
          Set-Content -Path "${{ env.BUILD_DIR }}\\version.txt" -Value $version
          echo "AppVersion=$version" | Out-File -FilePath $Env:GITHUB_ENV -Append

      # --------------------------------------------------
      # 5) Installe Inno¬†Setup¬†6 (si pas d√©j√† pr√©sent)
      # --------------------------------------------------
      - name: üß∞ Install Inno Setup 6
        run: choco install innosetup --no-progress

      # --------------------------------------------------
      # 6) Compile l'installeur via ISCC
      # --------------------------------------------------
      - name: üõ†Ô∏è Run ISCC
        shell: pwsh
        run: |
          & "C:\\Program Files (x86)\\Inno Setup 6\\ISCC.exe" `
            /DMyBuildDir="${{ github.workspace }}\\${{ env.BUILD_DIR }}" `
            /DAppVersion=${{ env.AppVersion }} `
            Installer\setup.iss

      # --------------------------------------------------
      # 7) Publie l'EXE :
      #    a) Artefact de workflow (toujours)
      #    b) Asset attach√© √† la Release GitHub (visible utilisateurs)
      # --------------------------------------------------
      - name: ‚¨ÜÔ∏è Upload installer artifact
        uses: actions/upload-artifact@v4
        with:
          name: AuraInstaller
          path: Installer/Output/*.exe

      - name: üöÄ Publish asset to GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          name: Aura_Setup.exe
          tag_name: ${{ github.ref_name }}   # cr√©e la release si inexistante
          files: Installer/Output/Aura_Setup.exe
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
